import Complex from './complex';
declare type complex = [number, number];
interface Icast {
    (a: complex | Complex | string): Complex;
    add(a: Complex | complex, ...b: (Complex | complex)[]): Complex;
    subtract(a: Complex | complex, ...b: (Complex | complex)[]): Complex;
    multiply(a: Complex | complex, ...b: (Complex | complex)[]): Complex;
    divide(a: Complex | complex, b: Complex | complex): Complex;
    power(a: Complex | complex, b: Complex | complex): Complex;
    root(a: Complex | complex, b: number): Complex;
    ln(a: Complex | complex): Complex;
    log(a: Complex | complex, b: Complex | complex | number): Complex;
    sin(a: Complex | complex): Complex;
    cos(a: Complex | complex): Complex;
    tan(a: Complex | complex): Complex;
    cot(a: Complex | complex): Complex;
    sec(a: Complex | complex): Complex;
    csc(a: Complex | complex): Complex;
    asin(a: Complex | complex): Complex;
    acos(a: Complex | complex): Complex;
    atan(a: Complex | complex): Complex;
    acot(a: Complex | complex): Complex;
    asec(a: Complex | complex): Complex;
    acsc(a: Complex | complex): Complex;
    sinh(a: Complex | complex): Complex;
    cosh(a: Complex | complex): Complex;
    tanh(a: Complex | complex): Complex;
    coth(a: Complex | complex): Complex;
    sech(a: Complex | complex): Complex;
    csch(a: Complex | complex): Complex;
    asinh(a: Complex | complex): Complex;
    acosh(a: Complex | complex): Complex;
    atanh(a: Complex | complex): Complex;
    acoth(a: Complex | complex): Complex;
    asech(a: Complex | complex): Complex;
    acsch(a: Complex | complex): Complex;
    abs(a: Complex | complex): number;
    conjugate(a: Complex | complex): Complex;
    R(a: Complex | complex): number;
    I(a: Complex | complex): number;
    get(a: Complex | complex): complex;
    stringify(a: Complex | complex): string;
    evaluate(a: string): string;
    LOGIE: complex;
    LOGEI: complex;
}
declare const cast: Icast;
export default cast;
